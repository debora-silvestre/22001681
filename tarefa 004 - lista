//parte 1: while e do while
//exercício 1
#include <stdio.h>
#include <locale.h>

int main() {
    setlocale(LC_ALL, "Portuguese");

    float temp;
    int a;

    do {
        printf("Insira o valor da temperatura atual do ambiente: ");
        scanf("%f", &temp);

        while (temp > 25 || temp < 20) {
            if (temp > 25) {
                printf("Temperatura muito alta! Reajustar ventilação.\n");
            } else {
                printf("Temperatura muito baixa! Reajustar ventilação.\n");
            }

            printf("Insira a nova temperatura do ambiente: ");      //solicitar ainda dentro do loop p n interromper msg
            scanf("%f", &temp);
        }

        //intervalo ideal
        printf("Temperatura dentro do intervalo ideal.\n");

        printf("\nDigite 1 para inserir uma nova temperatura ou 0 para encerrar o programa: ");
        scanf("%d", &a);

    } while (a == 1); 

    printf("Programa encerrado.\n");
    return 0;
}

//exercício 2
#include<stdio.h>
#include<locale.h>

int main()
{
    setlocale(LC_ALL, "portuguese");

    int a;
    float combustivel;

    printf("Insira a porcentagem de combustivel no tanque (0 a 100%): ");
    scanf("%f", &combustivel);

    while (combustivel < 100.0) {
        if (combustivel < 15.0) {
            printf("ALERTA: combustivel abaixo de 15%. Abasteça o veiculo!\n");
        } else {
            printf("Nivel de combustivel: %.2f%. \n", combustivel);
        }

        printf("Insira o nivel de combustivel atualizado (0 a 100%%): ");
        scanf("%f", &combustivel);                         //novos dados dentro do loop
    }                                                                      //fica no loop enqt combustivel n atingir 100%

    printf("Tanque cheio. Monitoramento encerrado.\n");

    return 0;
}

//exercício 3 
#include<stdio.h>
#include<locale.h>

int main()
{
    setlocale(LC_ALL, "portuguese");

    int passos, soma=0, a;

    do {
        printf("Insira o número de passos dados:");
        scanf("%d", &passos);

        soma += passos; //acumula passos, atualiza nm dentro do loop

        printf("Soma de passos até o momento: %d", soma);

        printf("Adicionar mais uma entrada? (1 = sim; 0 = não)");
        scanf("%d", &a);
    }while (a==1);

    printf("\n\nTotal de passos do dia: %d", soma);

    if(soma>=10000)
    {
        printf("\nParabéns, a meta diária foi alcançada!");
    }
    else
    {
        printf("\nContinue se esforçando para atingir a meta diária!");
    }

    return 0;

}

//exercício 4
#include<stdio.h>
#include<locale.h>

int main()
{
    setlocale(LC_ALL, "portuguese");

    float deposito;

    printf("Depósito inicial para abertura de conta no banco. \nInsira o valor do depósito:");
    scanf("%f", &deposito);

    while(deposito<500)
    {
        printf("Valor insuficiente. Insira um novo valor de depósito:");
        scanf("%f", &deposito);
    }

    printf("Valor suficiente. Inscrição aceita.");

    return 0;
}

//desafio 
#include<stdio.h>
#include<locale.h>
#include<math.h>

int main()
{
    setlocale(LC_ALL, "portuguese");

    int dias, a;

    do {
    printf("Programa para análise de desempenho de ações.\nInsira o número de dias que deseja analisar:");
    scanf("%d", &dias);

    float preco[dias], soma=0.0, media, desvio_p=0.0;

    //media dos preços
    for (int i=0; i<dias; i++)
    {
        printf("Insira o valor da ação no dia %d:", i+1);  //corrigir indice
        scanf("%f", &preco[i]);
        soma += preco[i]; //incrementos no loop
    }
    media = soma / dias; //calculo final c/ totais

    //desvio padrao (calcular separado
    for (int i=0; i<dias; i++)
    {
      desvio_p += pow(preco[i] - media, 2);
    }
    desvio_p = sqrt(desvio_p / dias);

    //resultados
    printf("\nMédia dos preços: %.2f", media);
    printf("\nDesvio padrão: %.2f", desvio_p);

    //estabilidade
    if(desvio_p > 0.05*media)
    {
        printf("\nDesempenho volátil.");
    }
    else
    {
        printf("Desempenho estável.");
    }

    //novas entradas
    printf("\nDeseja fazer uma nova análise? (1 = Sim, 0 = Não)");
    scanf("%d", &a);

}while (a==1);

return 0;

}

//parte 2: do while
//exercício 1
#include<stdio.h>
#include<locale.h>
#include<string.h> // comparar variaveis string

int main()
{
    setlocale(LC_ALL, "portuguese");

    float dist;
    char dir[10]; //cada palavra = 1 variavel char c/ caracteres
    char sair[] = "sair"; //smp a msm palavra

    printf("Programa para controle do movimento do robô.");
    printf("Digite direções para movê-lo. Digite 'sair' para parar o programa.");

    do {
        printf("Em que direção deseja mover o robô? \n(Esquerda, direita, frente ou trás?)");
        scanf("%s", &dir);

          if (strcmp(dir, sair) == 0) { //strcmp compara strings; se dir = sair, expressao = 0
            printf("Programa encerrado.\n");
            break;
        }

        printf("Quantos metros deseja mover o robô?");
        scanf("%f", &dist);

        printf("Movendo o robô %.2f metros para %s.\n", dist, dir);


    }while(1); // conta como (dir != 0)
return 0;
}

//exercício 2
#include<stdio.h>
#include<locale.h>

int main()
{
    setlocale(LC_ALL, "portuguese");

    float dist;
    char continuar;

    printf("Leitura de sensores de distância");
    printf("\nDigite 0 caso queira encerrar a leitura.");

    do {
        printf("\nInsira a distância medida pelo sensor: ");
        scanf("%f", &dist);

        if(dist<10)
        {
            printf("\nDistância = %.2f - Valor abaixo de 10 cm!", dist);
            break;                                                        //encerra programa se dist<10
        }
    printf("\nDistância = %.2f", dist);

    printf("\nContinuar a leitura? (s = sim; n = não)");
    scanf("%c", &continuar);

    if (continuar == 'n' || continuar == 'N') //lembrar das aspas para char
    {
        printf("Programa encerrado.");
        break;
    }

    }while(1); // loop continuará até que uma das condições de parada seja atingida

return 0;
}

//exercício 3
#include<stdio.h>
#include<locale.h>

int main()
{
    setlocale(LC_ALL, "portuguese");

    int acao, continuar;


    printf("Controle de atuação do robô.");
    printf("Selecione uma das seguintes atividades para que seja feita pelo robô (digite o número correspondente):");

    printf("(1) Trocar lâmpada");
    printf("(2) Aspirar chão");
    printf("(3) Tocar música");
    printf("(4) Mover um braço");
    printf("(5) Programar alarme");

    do{
          switch(acao)
          {
          case 1:
            printf("O robô irá trocar a lâmpada.");
          case 2:
            printf("O robô irá aspirar o chão.");
          case 3:
            printf("O robô irá tocar música.");
          case 4:
            printf("O robô irá mover um braço.");
          case 5:
            printf("O robô irá programar um alarme.");
          }

          printf("\nDeseja selecionar uma nova ação? (Digite '1')");
          printf("\nDeseja encerrar o programa? (Digite '0')");
          scanf("%d", &continuar);

    } while(continuar == 1);

    return 0;

}

//exercício 4
#include<stdio.h>
#include<locale.h>

int main()
{
    setlocale(LC_ALL, "portuguese");

    float bateria;
    int a;

        do{

    printf("Monitoramento de bateria do robô");
    printf("Insira o percentual da bateria do robô:");
    scanf("%f", &bateria);

    while(bateria<100) {

        if(bateria<20)
        {
            printf("Bateria baixa! Recarregue o robô.");
        }
        else
        {
            printf("Nível da bateria: %f", bateria);
        }

    printf("Insira o percentual atualizado da bateria: ");
    scanf("%f", &bateria);

}

     printf("Nível da bateria: %f. Robô totalmente carregado.", bateria);

     printf("Deseja inserir uma nova leitura? (1 = Sim, 0 = Não");
     scanf("%d", &a);

        }while (a==1);

     printf("Programa encerrado.");

     return 0;

}


//exercício 5
#include <stdio.h>
#include <locale.h>

int main() {
    setlocale(LC_ALL, "portuguese");

    // Posição inicial do robô
    int x = 2, y = 2; // Coordenadas do centro do grid
    char dir;

    printf("Simulação de Navegação Autônoma (limitado a grid 5x5).\n");
    printf("Comandos:\n");
    printf("c - mover para cima\n");
    printf("b - mover para baixo\n");
    printf("e - mover para esquerda\n");
    printf("d - mover para direita\n");
    printf("p - parar o programa\n");
    printf("\nO robô começa na posição (%d, %d).\n", x, y);

    do {
        printf("\nDigite o comando para mover o robô: ");
        scanf(" %c", &dir); 

        switch (dir) {
            case 'c': // Para cima
                if (y > 0) {
                    y--; // Altera posição como vetor
                } else {
                    printf("Movimento inválido! O robô não pode sair do grid.\n");
                }
                break;

            case 'b': // Para baixo
                if (y < 4) {
                    y++;
                } else {
                    printf("Movimento inválido! O robô não pode sair do grid.\n");
                }
                break;

            case 'e': // Para esquerda
                if (x > 0) {
                    x--;
                } else {
                    printf("Movimento inválido! O robô não pode sair do grid.\n");
                }
                break;

            case 'd': // Para direita
                if (x < 4) {
                    x++;
                } else {
                    printf("Movimento inválido! O robô não pode sair do grid.\n");
                }
                break;

            case 'p': // Encerrar
                printf("Programa encerrado pelo usuário.\n");
                break;

            default: // Comando inválido
                printf("Comando inválido! Use c, b, e, d ou p.\n");
        }

        //posição atual
        if (dir != 'p') {
            printf("Posição atual do robô: (%d, %d).\n", x, y);
        }
    } while (dir != 'p'); // Repete enquanto o comando não for 'p'

    return 0;
}

//desafio 2
#include <stdio.h>
#include <locale.h>
#include <string.h>

void controleMovimento() {
    float dist;
    char dir[10];
    char sair[] = "sair";

    printf("Programa para controle do movimento do robô.\n");
    printf("Digite direções para movê-lo. Digite 'sair' para parar o programa.\n");

    do {
        printf("\nEm que direção deseja mover o robô? \n(Esquerda, direita, frente ou trás?) ");
        scanf("%s", dir);

        if (strcmp(dir, sair) == 0) {
            printf("Programa encerrado.\n");
            break;
        }

        printf("Quantos metros deseja mover o robô? ");
        scanf("%f", &dist);

        printf("Movendo o robô %.2f metros para %s.\n", dist, dir);
    } while (1);
}

void leituraSensores() {
    float dist;
    char continuar;

    printf("Leitura de sensores de distância.\n");
    printf("Digite 0 caso queira encerrar a leitura.\n");

    do {
        printf("\nInsira a distância medida pelo sensor: ");
        scanf("%f", &dist);

        if (dist < 10) {
            printf("\nDistância = %.2f - Valor abaixo de 10 cm!\n", dist);
            break;
        }
        printf("\nDistância = %.2f\n", dist);

        printf("\nContinuar a leitura? (s = sim; n = não) ");
        scanf(" %c", &continuar);

        if (continuar == 'n' || continuar == 'N') {
            printf("Programa encerrado.\n");
            break;
        }
    } while (1);
}

void controleAtuacao() {
    int acao, continuar;

    printf("Controle de atuação do robô.\n");
    printf("Selecione uma das seguintes atividades para que seja feita pelo robô (digite o número correspondente):\n");
    printf("(1) Trocar lâmpada\n");
    printf("(2) Aspirar chão\n");
    printf("(3) Tocar música\n");
    printf("(4) Mover um braço\n");
    printf("(5) Programar alarme\n");

    do {
        printf("\nDigite a ação desejada: ");
        scanf("%d", &acao);

        switch (acao) {
            case 1:
                printf("O robô irá trocar a lâmpada.\n");
                break;
            case 2:
                printf("O robô irá aspirar o chão.\n");
                break;
            case 3:
                printf("O robô irá tocar música.\n");
                break;
            case 4:
                printf("O robô irá mover um braço.\n");
                break;
            case 5:
                printf("O robô irá programar um alarme.\n");
                break;
            default:
                printf("Ação inválida!\n");
        }

        printf("\nDeseja selecionar uma nova ação? (1 = Sim, 0 = Não): ");
        scanf("%d", &continuar);
    } while (continuar == 1);
}

void monitoramentoBateria() {
    float bateria;
    int a;

        do{

    printf("Monitoramento de bateria do robô");
    printf("Insira o percentual da bateria do robô:");
    scanf("%f", &bateria);

    while(bateria<100) {

        if(bateria<20)
        {
            printf("Bateria baixa! Recarregue o robô.");
        }
        else
        {
            printf("Nível da bateria: %f", bateria);
        }

    printf("Insira o percentual atualizado da bateria: ");
    scanf("%f", &bateria);

}

     printf("Nível da bateria: %f. Robô totalmente carregado.", bateria);

     printf("Deseja inserir uma nova leitura? (1 = Sim, 0 = Não");
     scanf("%d", &a);

        }while (a==1);

     printf("Programa encerrado.");
}

void navegacaoAutonoma() {
    int x = 2, y = 2;
    char dir;

    printf("Simulação de Navegação Autônoma (limitado a grid 5x5).\n");
    printf("Comandos:\n");
    printf("c - mover para cima\n");
    printf("b - mover para baixo\n");
    printf("e - mover para esquerda\n");
    printf("d - mover para direita\n");
    printf("p - parar o programa\n");
    printf("\nO robô começa na posição (%d, %d).\n", x, y);

    while (1) {
        printf("\nDigite o comando para mover o robô: ");
        scanf(" %c", &dir);

        switch (dir) {
            case 'c':
                if (y > 0) y--;
                else printf("Movimento inválido! O robô não pode sair do grid.\n");
                break;
            case 'b':
                if (y < 4) y++;
                else printf("Movimento inválido! O robô não pode sair do grid.\n");
                break;
            case 'e':
                if (x > 0) x--;
                else printf("Movimento inválido! O robô não pode sair do grid.\n");
                break;
            case 'd':
                if (x < 4) x++;
                else printf("Movimento inválido! O robô não pode sair do grid.\n");
                break;
            case 'p':
                printf("Programa encerrado pelo usuário.\n");
                return;
            default:
                printf("Comando inválido! Use c, b, e, d ou p.\n");
        }
        printf("Posição atual do robô: (%d, %d).\n", x, y);
    }
}

int main() {
    setlocale(LC_ALL, "portuguese");

    int comando, a;

    do {
        printf("\nMenu Principal - Funcionalidades do robô.\n");
        printf("(1) Controle de Movimento (10x10)\n");
        printf("(2) Leitura dos Sensores de Distância\n");
        printf("(3) Controle de Atuação - Funcionalidades\n");
        printf("(4) Monitoramento de Bateria\n");
        printf("(5) Navegação autônoma\n");
        printf("Digite o número do comando para executá-lo: ");
        scanf("%d", &comando);

        switch (comando) {
            case 1:
                controleMovimento();
                break;
            case 2:
                leituraSensores();
                break;
            case 3:
                controleAtuacao();
                break;
            case 4:
                monitoramentoBateria();
                break;
            case 5:
                navegacaoAutonoma();
                break;
            default:
                printf("Comando inválido! Tente novamente.\n");
        }

        printf("\nDeseja voltar ao menu principal? (1 = Sim, 0 = Não): ");
        scanf("%d", &a);
    } while (a == 1);

    printf("Programa encerrado.\n");
    return 0;
}

//PROBLEMAS
1) O vetor deve ser declarado como: 
int cameraData[10]; 
onde 'int' é classe do vetor (inteiros), cameraData é o nome e [10] o número de valores que o vetor pode armazenar.

2) analogRead é uma função que faz a leitura de uma porta analógica, nesse caso a porta A1. Ela está armazenando o valor 
retornado no índice 3 (posição 4) do vetor cameraData.

3) Deve-se especificar a classe do vetor, seu nome, o número de valores que armazenará e, por último, atribuir-lhe os valores 
na ordem dos índices, dessa forma:
float temperaturas[5] = {25.5, 26.0, 24.8, 27.3, 26.5}; 

4) A função Serial.println() imprime uma mensagem no monitor serial e logo após adiciona uma nova linha. Nesse caso, ele 
percorreria um vetor chamado ledPins de tamanho 4 e, a cada iteração, exibiria o valor contido no índice do respectivo led 
(as portas nas quais estão inseridos). 

5) Para que o código funcionasse no Arduino IDE, deve haver um vetor ledPins inicializado, com 4 valores armazenados nele. O 
monitor serial deve ser inicializado dentro da função void setup, e a parte que exibe os valores no monitor deve ser colocada
dentro de void loop. 
Exemplo: 

int ledPins[4] = {2, 3, 4, 5}; //vetor declarado

void setup() {
    Serial.begin(9600); // monitor inicializado
}

void loop() {
    for (int i = 0; i < 4; i++) {
        Serial.println(ledPins[i]); // exibe valores no monitor
    }
    delay(1000); 
}

6) Primeiramente, declara-se um vetor randomValues com 5 elementos. Depois, escreve-se a função randomSeed para gerar números 
aleatórios e embaralha-los. Para que esses números sejam novos a cada iteração do código, pode-se unir rasdomSeed a uma porta
analógica (ex: randomSeed(analogRead(0))) e pode-se definir dois parâmetros, um inicial e um final, para que os números 
gerados permaneçam entre eles.
Exemplo: 

int randomValues[5]; // vetor 

void setup() {
    Serial.begin(9600);
    randomSeed(analogRead(0)); // gerador de números aleatórios

    for (int i = 0; i < 5; i++) {
        randomValues[i] = random(0, 101); // parâmetros inicial e final 
        Serial.println(randomValues[i]); // exibe no monitor serial
    }
}

7) O loop descrito percorre um vetor sensorReadings enquanto o contador for menor que o tamanho do vetor. O 'if' abaixo, 
aliado ao 'break' no final, funciona como condição de parada, ou seja, o loop será interrompido no caso de o valor lido 
no sensor ser igual a 150. 

8) Essa função fará o cálculo do tamanho do vetor entre parênteses (sensorData) através da divisão do tamanho total do vetor
pelo tamanho de um elemento (cálculo feito em bytes, devolve o número de elementos do vetor). 

9) 
a) A primeira linha da matriz apresenta os valores de leitura de temperatura em cinco momentos diferentes (colunas), no 
primeiro local de monitoramento (linha). 
b) Os dados sobre a umidade no segundo local de monitoramento estão armazenados na sebgunda linha da matriz. Portanto, a 
média dos valores de umidade registrados são dados por: 
(45 + 38 + 42 + 40 + 37) / 5 = 40.4
c) Ela atingiu o máximo no terceiro momento de medição, visto que o maior valor da terceira linha é 420, na terceira posição.
d) Utilizando o início do código apresentado: 

int ambientData[3][5] = {
    {22, 25, 23, 21, 24},
    {45, 38, 42, 40, 37},
    {400, 380, 420, 410, 390} //matriz c/ dados
};

int totalLocais = 3;
int totalLeituras = 5;
int somaTemperaturas = 0;

void setup() {
    Serial.begin(9600);

    for (int i = 0; i < totalLocais; i++) { // varre as 3 linhas 
        for (int j = 0; j < totalLeituras; j++) { //dentro das 3 linhas, varre as 5 colunas
            somaTemperaturas += ambientData[0][j]; // linha 0 (temperatura), todas as colunas
        }
    }

    float mediaTemperatura = somaTemperaturas / totalLeituras;
    Serial.print("Média de temperatura: "); //printa frase 
    Serial.println(mediaTemperatura); //printa valor
}




















